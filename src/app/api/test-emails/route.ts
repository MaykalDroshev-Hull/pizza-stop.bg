import { NextRequest, NextResponse } from 'next/server'
import { emailService } from '../../../utils/emailService'

export async function POST(request: NextRequest) {
  try {
    const testEmail = 'hm.websiteprovisioning@gmail.com'
    const testName = 'Pizza Stop Test User'

    console.log('üöÄ Sending test emails...')

    // Test 1: Welcome Email
    console.log('üìß Sending welcome email...')
    await emailService.sendWelcomeEmail({
      to: testEmail,
      name: testName
    })
    console.log('‚úÖ Welcome email sent')

    // Test 2: Password Reset Email
    console.log('üìß Sending password reset email...')
    const resetToken = 'test-token-12345'
    const resetUrl = `${process.env.NEXT_PUBLIC_SITE_URL || 'https://pizza-stop.bg'}/reset-password?token=${resetToken}`
    
    await emailService.sendPasswordResetEmail({
      to: testEmail,
      name: testName,
      resetToken: resetToken,
      resetUrl: resetUrl
    })
    console.log('‚úÖ Password reset email sent')

    // Test 3: Order Confirmation Email
    console.log('üìß Sending order confirmation email...')
    const orderDetails = {
      items: [
        {
          name: '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞',
          size: '–ì–æ–ª—è–º–∞',
          quantity: 1,
          price: 18.50,
          addons: [
            { name: '–î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–æ —Å–∏—Ä–µ–Ω–µ', price: 2.00 },
            { name: '–†—É–∫–æ–ª–∞', price: 1.50 }
          ],
          comment: '–ë–µ–∑ –ª—É–∫, –º–æ–ª—è'
        },
        {
          name: '–ö–æ–∫–∞ –∫–æ–ª–∞',
          size: '330–º–ª',
          quantity: 2,
          price: 2.30,
          addons: []
        },
        {
          name: '–ß–∏–∑–±—É—Ä–≥–µ—Ä',
          size: '–°—Ä–µ–¥–µ–Ω',
          quantity: 1,
          price: 12.90,
          addons: [
            { name: '–î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞ –º–µ—Å–æ', price: 3.00 },
            { name: '–ë–µ–∫–æ–Ω', price: 2.50 }
          ]
        }
      ],
      totalAmount: 45.50,
      orderTime: '–í–µ–¥–Ω–∞–≥–∞',
      orderType: '–î–æ—Å—Ç–∞–≤–∫–∞',
      paymentMethod: '–° –∫–∞—Ä—Ç–∞ –Ω–∞ –∞–¥—Ä–µ—Å',
      location: '—É–ª. "–ì–ª–∞–≤–Ω–∞" ‚Ññ15, –µ—Ç. 3, –∞–ø. 8, –õ–æ–≤–µ—á',
      estimatedTime: '30-45 –º–∏–Ω—É—Ç–∏',
      addressInstructions: '–í–ª–µ–∑—Ç–µ –æ—Ç –≥–ª–∞–≤–Ω–∏—è –≤—Ö–æ–¥, –∑–≤—ä–Ω–Ω–µ—Ç–µ –Ω–∞ –∑–≤—ä–Ω–µ—Ü–∞ –Ω–∞ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç 8',
      specialInstructions: '–ú–æ–ª—è, –¥–æ—Å—Ç–∞–≤–µ—Ç–µ –¥–æ 19:30 —á–∞—Å–∞'
    }

    await emailService.sendOrderConfirmationEmail({
      to: testEmail,
      name: testName,
      orderId: '12345',
      orderDetails: orderDetails
    })
    console.log('‚úÖ Order confirmation email sent')

    return NextResponse.json({
      success: true,
      message: 'All test emails sent successfully!',
      details: {
        recipient: testEmail,
        emailsSent: [
          'Welcome Email',
          'Password Reset Email', 
          'Order Confirmation Email'
        ]
      }
    })

  } catch (error) {
    console.error('‚ùå Error sending test emails:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: 'Failed to send test emails',
        details: error.message 
      },
      { status: 500 }
    )
  }
}
